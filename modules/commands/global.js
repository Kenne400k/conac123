const axios = require("axios");
const fs = require("fs");
const path = require("path");

// L·∫•y danh s√°ch video t·ª´ file JSON
const urls = require(path.join(__dirname, "../../data_dongdev/datajson/vdanime.json"));

// T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a c√≥
const cacheDir = path.join(__dirname, "cache");
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

class Command {
    constructor(config) {
        this.config = config;
        if (!global.khanhdayr) global.khanhdayr = [];
        this.status = false;
        this.uploadInterval = null;
    }

    async onLoad(o) {
        // Tr√°nh setInterval nhi·ªÅu l·∫ßn
        if (this.uploadInterval) return;
        this.uploadInterval = setInterval(async () => {
            if (this.status || global.khanhdayr.length > 10) return;
            this.status = true;
            try {
                // Upload 5 random video l√™n Facebook CDN m·ªói 5s
                const jobs = [];
                for (let i = 0; i < 5; i++) {
                    const randUrl = urls[Math.floor(Math.random() * urls.length)];
                    jobs.push(this.upload(randUrl, o));
                }
                const results = await Promise.all(jobs);
                global.khanhdayr.push(...results.filter(Boolean));
            } catch (e) {
                console.error("Upload video l·ªói:", e);
            }
            this.status = false;
        }, 1000 * 5);
    }

    async streamURL(url, type = "mp4") {
        // L·∫•y stream t·ª´ URL v√† x√≥a file sau 1 ph√∫t
        const res = await axios.get(url, { responseType: "arraybuffer" });
        const filePath = path.join(cacheDir, `${Date.now()}_${Math.floor(Math.random() * 9999)}.${type}`);
        fs.writeFileSync(filePath, res.data);
        setTimeout(() => {
            if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
        }, 1000 * 60);
        return fs.createReadStream(filePath);
    }

    async upload(url, o) {
        try {
            const stream = await this.streamURL(url, "mp4");
            const response = await o.api.httpPostFormData(
                "https://upload.facebook.com/ajax/mercury/upload.php",
                { upload_1024: stream }
            );
            const json = JSON.parse(response.replace("for (;;);", ""));
            const meta = json.payload?.metadata?.[0];
            if (!meta) return null;
            const [[, value]] = Object.entries(meta);
            return value;
        } catch (e) {
            // N·∫øu upload th·∫•t b·∫°i, b·ªè qua
            return null;
        }
    }

    async run(o) {
        // L·∫•y random "th√≠nh" t·ª´ API
        let thinhMsg = "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√≠nh!";
        try {
            const response = await axios.get('https://raw.githubusercontent.com/Sang070801/api/main/thinh1.json');
            const data = response.data;
            const thinhArray = Object.values(data.data || {});
            thinhMsg = thinhArray[Math.floor(Math.random() * thinhArray.length)] || thinhMsg;
        } catch (e) { }

        // T√≠nh uptime
        const t = process.uptime();
        const h = Math.floor(t / 3600);
        const p = Math.floor((t % 3600) / 60);
        const s = Math.floor(t % 60);

        // L·∫•y video random ƒë√£ up
        let attachment = [];
        if (global.khanhdayr.length > 0) attachment.push(global.khanhdayr.shift());

        // G·ª≠i tin nh·∫Øn
        const body = `‚è∞ Th·ªùi gian ho·∫°t ƒë·ªông: ${h.toString().padStart(2, "0")}:${p.toString().padStart(2, "0")}:${s.toString().padStart(2, "0")}\nüíå Th√≠nh: ${thinhMsg}`;
        await o.api.sendMessage({ body, attachment }, o.event.threadID, o.event.messageID);
    }
}

module.exports = new Command({
    name: "global",
    version: "1.1.0",
    hasPermssion: 2,
    credits: "DC-Nam (fix/c·∫£i ti·∫øn b·ªüi Kenne401k)",
    description: "G·ª≠i uptime v√† random video + th√≠nh",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[]",
    cooldowns: 0,
});